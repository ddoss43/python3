diff -urNp -x '*.orig' Python-3.9.2.org/Lib/test/test_asyncio/test_tasks.py Python-3.9.2/Lib/test/test_asyncio/test_tasks.py
--- Python-3.9.2.org/Lib/test/test_asyncio/test_tasks.py	2021-02-19 13:31:44.000000000 +0100
+++ Python-3.9.2/Lib/test/test_asyncio/test_tasks.py	2021-02-25 18:41:41.098779547 +0100
@@ -6,6 +6,7 @@ import contextvars
 import functools
 import gc
 import io
+import os
 import random
 import re
 import sys
@@ -3283,6 +3284,7 @@ class GatherTestsBase:
         cb.assert_called_once_with(fut)
         self.assertEqual(fut.result(), [3, 1, exc, exc2])
 
+    @unittest.skipIf("PYTHONPATH" in os.environ, "$PYTHONPATH set")
     def test_env_var_debug(self):
         code = '\n'.join((
             'import asyncio.coroutines',
diff -urNp -x '*.orig' Python-3.9.2.org/Lib/test/test_cmd_line.py Python-3.9.2/Lib/test/test_cmd_line.py
--- Python-3.9.2.org/Lib/test/test_cmd_line.py	2021-02-19 13:31:44.000000000 +0100
+++ Python-3.9.2/Lib/test/test_cmd_line.py	2021-02-25 18:41:41.098779547 +0100
@@ -265,6 +265,7 @@ class CmdLineTest(unittest.TestCase):
         self.assertEqual(rc, 0)
         self.assertTrue(data.startswith(b'x'), data)
 
+    @unittest.skipIf("PYTHONPATH" in os.environ, "$PYTHONPATH set")
     def test_large_PYTHONPATH(self):
         path1 = "ABCDE" * 100
         path2 = "FGHIJ" * 100
@@ -280,6 +281,7 @@ class CmdLineTest(unittest.TestCase):
         self.assertIn(path1.encode('ascii'), out)
         self.assertIn(path2.encode('ascii'), out)
 
+    @unittest.skipIf("PYTHONPATH" in os.environ, "$PYTHONPATH set")
     def test_empty_PYTHONPATH_issue16309(self):
         # On Posix, it is documented that setting PATH to the
         # empty string is equivalent to not setting PATH at all,
--- Python-3.10.6/Lib/test/test_compileall.py.orig	2022-08-21 08:24:26.562151782 +0200
+++ Python-3.10.6/Lib/test/test_compileall.py	2022-08-22 16:36:51.754553471 +0200
@@ -508,6 +508,7 @@ class CommandLineTestsBase:
         path = importlib.util.cache_from_source(fn)
         self.assertFalse(os.path.exists(path))
 
+    @unittest.skipIf("PYTHONPATH" in os.environ, "$PYTHONPATH set")
     def test_no_args_compiles_path(self):
         # Note that -l is implied for the no args case.
         bazfn = script_helper.make_script(self.directory, 'baz', '')
@@ -517,6 +518,7 @@ class CommandLineTestsBase:
             self.assertNotCompiled(self.initfn)
             self.assertNotCompiled(self.barfn)
 
+    @unittest.skipIf("PYTHONPATH" in os.environ, "$PYTHONPATH set")
     @without_source_date_epoch  # timestamp invalidation test
     def test_no_args_respects_force_flag(self):
         bazfn = script_helper.make_script(self.directory, 'baz', '')
@@ -535,6 +537,7 @@ class CommandLineTestsBase:
         mtime2 = os.stat(pycpath).st_mtime
         self.assertNotEqual(mtime, mtime2)
 
+    @unittest.skipIf("PYTHONPATH" in os.environ, "$PYTHONPATH set")
     def test_no_args_respects_quiet_flag(self):
         script_helper.make_script(self.directory, 'baz', '')
         with self.temporary_pycache_prefix() as env:
diff -urNp -x '*.orig' Python-3.9.2.org/Lib/test/test_pydoc.py Python-3.9.2/Lib/test/test_pydoc.py
--- Python-3.9.2.org/Lib/test/test_pydoc.py	2021-02-19 13:31:44.000000000 +0100
+++ Python-3.9.2/Lib/test/test_pydoc.py	2021-02-25 18:41:41.098779547 +0100
@@ -885,6 +885,7 @@ class PydocImportTest(PydocBaseTest):
         self.addCleanup(rmtree, TESTFN)
         importlib.invalidate_caches()
 
+    @unittest.skipIf("PYTHONPATH" in os.environ, "$PYTHONPATH set")
     def test_badimport(self):
         # This tests the fix for issue 5230, where if pydoc found the module
         # but the module had an internal import error pydoc would report no doc
diff -urNp -x '*.orig' Python-3.9.2.org/Lib/test/test_venv.py Python-3.9.2/Lib/test/test_venv.py
--- Python-3.9.2.org/Lib/test/test_venv.py	2021-02-19 13:31:44.000000000 +0100
+++ Python-3.9.2/Lib/test/test_venv.py	2021-02-25 18:41:41.098779547 +0100
@@ -173,6 +173,7 @@ class BasicTest(BaseTest):
                 builder.upgrade_dependencies(fake_context)
 
     @requireVenvCreate
+    @unittest.skipIf("PYTHONPATH" in os.environ, "$PYTHONPATH set")
     def test_prefixes(self):
         """
         Test that the prefix values are as expected.
@@ -310,6 +311,7 @@ class BasicTest(BaseTest):
     # point to the venv being used to run the test, and we lose the link
     # to the source build - so Python can't initialise properly.
     @requireVenvCreate
+    @unittest.skipIf("PYTHONPATH" in os.environ, "$PYTHONPATH set")
     def test_executable(self):
         """
         Test that the sys.executable value is as expected.
@@ -406,6 +408,7 @@ class BasicTest(BaseTest):
         self.assertEqual(out.strip(), 'False'.encode())
 
 @requireVenvCreate
+@unittest.skipIf("PYTHONPATH" in os.environ, "$PYTHONPATH set")
 class EnsurePipTest(BaseTest):
     """Test venv module installation of pip."""
     def assert_pip_not_installed(self):
diff -urNp -x '*.orig' Python-3.9.2.org/Lib/test/test_warnings/__init__.py Python-3.9.2/Lib/test/test_warnings/__init__.py
--- Python-3.9.2.org/Lib/test/test_warnings/__init__.py	2021-02-25 18:41:39.412060338 +0100
+++ Python-3.9.2/Lib/test/test_warnings/__init__.py	2021-02-25 18:41:41.098779547 +0100
@@ -1218,6 +1218,7 @@ class PyEnvironmentVariableTests(Environ
 
 class BootstrapTest(unittest.TestCase):
     @unittest.skipUnless(support.is_resource_enabled("cmdline"), "python cmdline tests disabled")
+    @unittest.skipIf("PYTHONPATH" in os.environ, "$PYTHONPATH set")
     def test_issue_8766(self):
         # "import encodings" emits a warning whereas the warnings is not loaded
         # or not completely loaded (warnings imports indirectly encodings by

diff -dur -x '*~' Python-3.5.0.orig/Lib/test/test_asyncio/test_tasks.py Python-3.5.0/Lib/test/test_asyncio/test_tasks.py
--- Python-3.5.0.orig/Lib/test/test_asyncio/test_tasks.py	2015-09-13 13:41:23.000000000 +0200
+++ Python-3.5.0/Lib/test/test_asyncio/test_tasks.py	2015-12-03 18:35:52.223668265 +0100
@@ -1870,6 +1870,7 @@
         cb.assert_called_once_with(fut)
         self.assertEqual(fut.result(), [3, 1, exc, exc2])
 
+    @unittest.skipIf("PYTHONPATH" in os.environ, "$PYTHONPATH set")
     def test_env_var_debug(self):
         aio_path = os.path.dirname(os.path.dirname(asyncio.__file__))
 
diff -dur -x '*~' Python-3.5.0.orig/Lib/test/test_cmd_line.py Python-3.5.0/Lib/test/test_cmd_line.py
--- Python-3.5.0.orig/Lib/test/test_cmd_line.py	2015-09-13 13:41:23.000000000 +0200
+++ Python-3.5.0/Lib/test/test_cmd_line.py	2015-12-03 18:35:52.227001621 +0100
@@ -237,6 +237,7 @@
         self.assertEqual(rc, 0)
         self.assertTrue(data.startswith(b'x'), data)
 
+    @unittest.skipIf("PYTHONPATH" in os.environ, "$PYTHONPATH set")
     def test_large_PYTHONPATH(self):
         path1 = "ABCDE" * 100
         path2 = "FGHIJ" * 100
@@ -252,6 +253,7 @@
         self.assertIn(path1.encode('ascii'), out)
         self.assertIn(path2.encode('ascii'), out)
 
+    @unittest.skipIf("PYTHONPATH" in os.environ, "$PYTHONPATH set")
     def test_empty_PYTHONPATH_issue16309(self):
         # On Posix, it is documented that setting PATH to the
         # empty string is equivalent to not setting PATH at all,
diff -dur -x '*~' Python-3.5.0.orig/Lib/test/test_compileall.py Python-3.5.0/Lib/test/test_compileall.py
--- Python-3.5.0.orig/Lib/test/test_compileall.py	2015-12-03 18:35:31.483520885 +0100
+++ Python-3.5.0/Lib/test/test_compileall.py	2015-12-03 18:35:52.227001621 +0100
@@ -206,6 +206,7 @@
     def _cleanup(self):
         support.rmtree(self.directory)
 
+    @unittest.skipIf("PYTHONPATH" in os.environ, "$PYTHONPATH set")
     def test_no_args_compiles_path(self):
         # Note that -l is implied for the no args case.
         bazfn = script_helper.make_script(self.directory, 'baz', '')
@@ -214,6 +215,7 @@
         self.assertNotCompiled(self.initfn)
         self.assertNotCompiled(self.barfn)
 
+    @unittest.skipIf("PYTHONPATH" in os.environ, "$PYTHONPATH set")
     def test_no_args_respects_force_flag(self):
         bazfn = script_helper.make_script(self.directory, 'baz', '')
         self.assertRunOK(PYTHONPATH=self.directory)
@@ -230,6 +232,7 @@
         mtime2 = os.stat(pycpath).st_mtime
         self.assertNotEqual(mtime, mtime2)
 
+    @unittest.skipIf("PYTHONPATH" in os.environ, "$PYTHONPATH set")
     def test_no_args_respects_quiet_flag(self):
         script_helper.make_script(self.directory, 'baz', '')
         noisy = self.assertRunOK(PYTHONPATH=self.directory)
diff -dur -x '*~' Python-3.5.0.orig/Lib/test/test_pydoc.py Python-3.5.0/Lib/test/test_pydoc.py
--- Python-3.5.0.orig/Lib/test/test_pydoc.py	2015-09-13 13:41:23.000000000 +0200
+++ Python-3.5.0/Lib/test/test_pydoc.py	2015-12-03 18:35:52.227001621 +0100
@@ -631,6 +631,7 @@
         self.addCleanup(rmtree, TESTFN)
         importlib.invalidate_caches()
 
+    @unittest.skipIf("PYTHONPATH" in os.environ, "$PYTHONPATH set")
     def test_badimport(self):
         # This tests the fix for issue 5230, where if pydoc found the module
         # but the module had an internal import error pydoc would report no doc
diff -dur -x '*~' Python-3.5.0.orig/Lib/test/test_site.py Python-3.5.0/Lib/test/test_site.py
--- Python-3.5.0.orig/Lib/test/test_site.py	2015-09-13 13:41:23.000000000 +0200
+++ Python-3.5.0/Lib/test/test_site.py	2015-12-03 18:37:57.484550877 +0100
@@ -320,6 +320,7 @@
         """Restore sys.path"""
         sys.path[:] = self.sys_path
 
+    @unittest.skipIf("PYTHONPATH" in os.environ, "$PYTHONPATH set")
     def test_abs_paths(self):
         # Make sure all imported modules have their __file__ and __cached__
         # attributes as absolute paths.  Arranging to put the Lib directory on
diff -dur -x '*~' Python-3.5.0.orig/Lib/test/test_venv.py Python-3.5.0/Lib/test/test_venv.py
--- Python-3.5.0.orig/Lib/test/test_venv.py	2015-09-13 13:41:23.000000000 +0200
+++ Python-3.5.0/Lib/test/test_venv.py	2015-12-03 18:35:52.227001621 +0100
@@ -111,6 +111,7 @@
         self.assertTrue(os.path.exists(fn), 'File %r should exist.' % fn)
 
     @skipInVenv
+    @unittest.skipIf("PYTHONPATH" in os.environ, "$PYTHONPATH set")
     def test_prefixes(self):
         """
         Test that the prefix values are as expected.
@@ -249,6 +250,7 @@
     # point to the venv being used to run the test, and we lose the link
     # to the source build - so Python can't initialise properly.
     @skipInVenv
+    @unittest.skipIf("PYTHONPATH" in os.environ, "$PYTHONPATH set")
     def test_executable(self):
         """
         Test that the sys.executable value is as expected.
@@ -279,6 +281,7 @@
 
 
 @skipInVenv
+@unittest.skipIf("PYTHONPATH" in os.environ, "$PYTHONPATH set")
 class EnsurePipTest(BaseTest):
     """Test venv module installation of pip."""
     def assert_pip_not_installed(self):
diff -dur -x '*~' Python-3.5.0.orig/Lib/test/test_warnings/__init__.py Python-3.5.0/Lib/test/test_warnings/__init__.py
--- Python-3.5.0.orig/Lib/test/test_warnings/__init__.py	2015-12-03 18:35:31.483520885 +0100
+++ Python-3.5.0/Lib/test/test_warnings/__init__.py	2015-12-03 18:35:52.227001621 +0100
@@ -918,6 +918,7 @@
 
 class BootstrapTest(unittest.TestCase):
     @unittest.skipUnless(support.is_resource_enabled("cmdline"), "python cmdline tests disabled")
+    @unittest.skipIf("PYTHONPATH" in os.environ, "$PYTHONPATH set")
     def test_issue_8766(self):
         # "import encodings" emits a warning whereas the warnings is not loaded
         # or not completely loaded (warnings imports indirectly encodings by
